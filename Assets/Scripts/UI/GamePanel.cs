// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System.Collections;
using UniRx;

namespace ARBattle
{
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;
    using System;

    public class GamePanelData : QFramework.UIPanelData
    {
    };

    public partial class GamePanel : QFramework.UIPanel
    {
        private GamePlayer player;
        private UIShaImg uiShaImg;
        //统计UISha的杀怪数量
        private int mUIShaCount = 0;
        private int mValidTime = 3;  //有效时间超过时间重新计数

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException();
        }

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as GamePanelData ?? new GamePanelData();

            RestartBtn.onClick.AddListener((() =>
            {
                GameManager.Instance.ReStartGame();
                RestartBtn.gameObject.SetActive(false);
            }));
            RestartBtn.gameObject.SetActive(false);
            uiShaImg = ShaImg.GetComponent<UIShaImg>();
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
            HpBar.GetComponent<UISlider>().Init();
            GameManager.Instance.Player.GetComponent<GamePlayer>().AttachHpSlider(HpBar.GetComponent<UISlider>());
            uiShaImg.gameObject.SetActive(false);
            StageSystem.Instance.Stop();
            PlayTimeDown();
        }

        protected override void OnShow()
        {
        }

        protected override void OnHide()
        {
        }

        protected override void OnClose()
        {
        }

        protected override void RegisterUIEvent()
        {
            EventCenter.AddListener(EventDefine.ReStartGame, ShowRestartBtn);
            EventCenter.AddListener(EventDefine.TargetFound, CloseToastPanel);
            EventCenter.AddListener(EventDefine.TargetLost, ShowToastPanel);
            EventCenter.AddListener(EventDefine.UpdateUISha, UpdateShaImg);
            EventCenter.AddListener<float>(EventDefine.UpdateStageTime, UpdateStageTime);
            EventCenter.AddListener(EventDefine.TimeDown,PlayTimeDown);
        }

        protected override void OnBeforeDestroy()
        {
            base.OnBeforeDestroy();
            EventCenter.RemoveListener(EventDefine.ReStartGame, ShowRestartBtn);
            EventCenter.RemoveListener(EventDefine.TargetFound, CloseToastPanel);
            EventCenter.RemoveListener(EventDefine.TargetLost, ShowToastPanel);
            EventCenter.RemoveListener(EventDefine.UpdateUISha, UpdateShaImg);
            EventCenter.RemoveListener<float>(EventDefine.UpdateStageTime, UpdateStageTime);
            EventCenter.RemoveListener(EventDefine.TimeDown, PlayTimeDown);
        }

        private void PlayTimeDown()
        {
            TimeDown.CountDown();
        }

        private void UpdateStageTime(float time)
        {
            StageTime.UpdateStageTime(time);
        }

        private void UpdateShaImg()
        {
            StopCoroutine("Timer");

            mUIShaCount++;

            //重置UISha次数
            StartCoroutine("Timer");

            uiShaImg.gameObject.SetActive(true);
            uiShaImg.UpdateNumImage(mUIShaCount);
        }

        IEnumerator Timer()
        {
            yield return new WaitForSeconds(mValidTime);
            mUIShaCount = 0;
            uiShaImg.gameObject.SetActive(false);
        }
  
        private void ShowRestartBtn()
        {
            //RestartBtn.gameObject.SetActive(true);
            GameManager.Instance.ReStartGame();
        }

        private void ShowToastPanel()
        {
            UIMgr.OpenPanel<ToastPanel>(UILevel.Toast);
        }

        private void CloseToastPanel()
        {
            UIMgr.ClosePanel<ToastPanel>();
        }

    }
}